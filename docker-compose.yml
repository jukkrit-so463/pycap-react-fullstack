version: '3.8' # ระบุ Docker Compose version

services:
  # Node.js Backend Service
  backend:
    build:
      context: ./soap-login-server # ระบุ path ของ Dockerfile context
      dockerfile: Dockerfile       # ระบุชื่อ Dockerfile
    container_name: soap-login-backend # กำหนดชื่อ Container ให้ชัดเจน
    ports:
      - "5000:5000" # Host_Port:Container_Port - Backend จะรันบนพอร์ต 5000 ทั้งบน Host และใน Container
    environment:
      # Environment Variables สำหรับ Node.js Backend เพื่อเชื่อมต่อ MySQL และ JWT
      MYSQL_HOST: db                  # ชี้ไปที่ชื่อ Service ของ MySQL ใน Docker Compose network
      MYSQL_USER: ${DB_USER}          # ดึงค่าจากไฟล์ .env
      MYSQL_PASSWORD: ${DB_PASSWORD}  # ดึงค่าจากไฟล์ .env
      MYSQL_DATABASE: ${DB_DATABASE}  # ดึงค่าจากไฟล์ .env
      JWT_SECRET: ${JWT_SECRET}       # ดึงค่าจากไฟล์ .env
      NODE_ENV: production            # ตั้งค่าเป็น production เพื่อประสิทธิภาพและความปลอดภัย
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network # เชื่อมต่อกับ Network ที่กำหนดเอง
    restart: always # กำหนดให้ Container รันใหม่เสมอหากหยุดทำงาน

  # React Frontend Service (Served by Nginx)
  frontend:
    build:
      context: ./soap-login # ระบุ path ของ Dockerfile context
      dockerfile: Dockerfile    # ระบุชื่อ Dockerfile
    container_name: soap-login-frontend # กำหนดชื่อ Container ให้ชัดเจน
    ports:
      - "80:80" # Host_Port:Container_Port - Frontend (Nginx) จะรันบนพอร์ต 80
    environment:
      # สำหรับ React (Create React App) ที่ต้องทราบ URL ของ Backend API
      # เนื่องจากจะใช้ Nginx Reverse Proxy, Frontend จะเรียก API ผ่าน path /api
      REACT_APP_API_BASE_URL: /api
      # SOAP service configuration
      REACT_APP_SOAP_SERVICE_URL: http://10.106.0.210
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - backend # Frontend จะเริ่มหลังจาก Backend พร้อมใช้งาน (เพื่อให้มั่นใจว่า API พร้อม)
    networks:
      - app_network # เชื่อมต่อกับ Network ที่กำหนดเอง
    restart: always # กำหนดให้ Container รันใหม่เสมอหากหยุดทำงาน

  # MySQL Database Service
  db:  # <- ไม่มี Space นำหน้า 'db:'
    image: mysql:8.0 # <- 2 Spaces นำหน้า 'image:'
    container_name: soap-login-mysql # <- 2 Spaces นำหน้า 'container_name:'
    restart: unless-stopped # <- 2 Spaces นำหน้า 'restart:'
    environment: # <- 2 Spaces นำหน้า 'environment:'
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD} # <- 4 Spaces นำหน้า 'MYSQL_ROOT_PASSWORD:'
      MYSQL_DATABASE: ${DB_DATABASE} # <- 4 Spaces นำหน้า 'MYSQL_DATABASE:'
      MYSQL_USER: ${DB_USER} # <- 4 Spaces นำหน้า 'MYSQL_USER:'
      MYSQL_PASSWORD: ${DB_PASSWORD} # <- 4 Spaces นำหน้า 'MYSQL_PASSWORD:'
    volumes: # <- 2 Spaces นำหน้า 'volumes:' (น่าจะเป็นบรรทัดที่ 63 หรือใกล้เคียง)
      - mysql_data:/var/lib/mysql # <- 4 Spaces และมีขีด '-' นำหน้า
      - ./mysql-init:/docker-entrypoint-initdb.d # <- 4 Spaces และมีขีด '-' นำหน้า
    ports: # <- 2 Spaces นำหน้า 'ports:' (อาจจะเป็นบรรทัดที่ 67 หรือใกล้เคียง)
      - "3306:3306" # <- 4 Spaces และมีขีด '-' นำหน้า
    networks: # <- 2 Spaces นำหน้า 'networks:'
      - app_network # <- 4 Spaces และมีขีด '-' นำหน้า
    healthcheck: # <- 2 Spaces นำหน้า 'healthcheck:'
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"] # <- 4 Spaces นำหน้า
      timeout: 20s # <- 4 Spaces นำหน้า
      retries: 10 # <- 4 Spaces นำหน้า
      start_period: 60s # <- 4 Spaces นำหน้า
      interval: 5s # <- 4 Spaces นำห
# Docker Volumes สำหรับเก็บข้อมูลถาวร
volumes:
  mysql_data: # Volume สำหรับข้อมูล MySQL

# Docker Networks สำหรับให้ Services สื่อสารกัน
networks:
  app_network:
    driver: bridge # ใช้ Bridge network
